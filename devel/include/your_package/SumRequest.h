// Generated by gencpp from file your_package/SumRequest.msg
// DO NOT EDIT!


#ifndef YOUR_PACKAGE_MESSAGE_SUMREQUEST_H
#define YOUR_PACKAGE_MESSAGE_SUMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace your_package
{
template <class ContainerAllocator>
struct SumRequest_
{
  typedef SumRequest_<ContainerAllocator> Type;

  SumRequest_()
    : A(0)
    , B(0)  {
    }
  SumRequest_(const ContainerAllocator& _alloc)
    : A(0)
    , B(0)  {
  (void)_alloc;
    }



   typedef int64_t _A_type;
  _A_type A;

   typedef int64_t _B_type;
  _B_type B;





  typedef boost::shared_ptr< ::your_package::SumRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::your_package::SumRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SumRequest_

typedef ::your_package::SumRequest_<std::allocator<void> > SumRequest;

typedef boost::shared_ptr< ::your_package::SumRequest > SumRequestPtr;
typedef boost::shared_ptr< ::your_package::SumRequest const> SumRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::your_package::SumRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::your_package::SumRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::your_package::SumRequest_<ContainerAllocator1> & lhs, const ::your_package::SumRequest_<ContainerAllocator2> & rhs)
{
  return lhs.A == rhs.A &&
    lhs.B == rhs.B;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::your_package::SumRequest_<ContainerAllocator1> & lhs, const ::your_package::SumRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace your_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::your_package::SumRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::your_package::SumRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::your_package::SumRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::your_package::SumRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::your_package::SumRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::your_package::SumRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::your_package::SumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02f05bb5bde9ff0aeeed7cca0d2e13fc";
  }

  static const char* value(const ::your_package::SumRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02f05bb5bde9ff0aULL;
  static const uint64_t static_value2 = 0xeeed7cca0d2e13fcULL;
};

template<class ContainerAllocator>
struct DataType< ::your_package::SumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "your_package/SumRequest";
  }

  static const char* value(const ::your_package::SumRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::your_package::SumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 A\n"
"int64 B\n"
;
  }

  static const char* value(const ::your_package::SumRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::your_package::SumRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A);
      stream.next(m.B);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SumRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::your_package::SumRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::your_package::SumRequest_<ContainerAllocator>& v)
  {
    s << indent << "A: ";
    Printer<int64_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<int64_t>::stream(s, indent + "  ", v.B);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUR_PACKAGE_MESSAGE_SUMREQUEST_H
